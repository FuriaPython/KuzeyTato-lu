local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()


local Window = Rayfield:CreateWindow({
   Name = "Duck Hub",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Duck Hub",
   LoadingSubtitle = "by Furia",
   Theme = "Default", -- Check https://[Log in to view URL]

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Duck Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Tab = Window:CreateTab("üî´Main", nil) -- Title, Image
local Section = Tab:CreateSection("Esp")


local Button = Tab:CreateButton({
   Name = "Glow",
   Callback = function()
            
local FillColor = Color3.fromRGB(0, 202, 0)
local DepthMode = "AlwaysOnTop"
local FillTransparency = 0.5
local OutlineColor = Color3.fromRGB(255,255,255)
local OutlineTransparency = 0

local CoreGui = game:FindService("CoreGui")
local Players = game:FindService("Players")
local lp = Players.LocalPlayer
local connections = {}

local Storage = Instance.new("Folder")
Storage.Parent = CoreGui
Storage.Name = "Highlight_Storage"

local function Highlight(plr)
    local Highlight = Instance.new("Highlight")
    Highlight.Name = plr.Name
    Highlight.FillColor = FillColor
    Highlight.DepthMode = DepthMode
    Highlight.FillTransparency = FillTransparency
    Highlight.OutlineColor = OutlineColor
    Highlight.OutlineTransparency = 0
    Highlight.Parent = Storage
    
    local plrchar = plr.Character
    if plrchar then
        Highlight.Adornee = plrchar
    end

    connections[plr] = plr.CharacterAdded:Connect(function(char)
        Highlight.Adornee = char
    end)
end

Players.PlayerAdded:Connect(Highlight)
for i,v in next, Players:GetPlayers() do
    Highlight(v)
end

Players.PlayerRemoving:Connect(function(plr)
    local plrname = plr.Name
    if Storage[plrname] then
        Storage[plrname]:Destroy()
    end
    if connections[plr] then
        connections[plr]:Disconnect()
    end
end)
   end,
})

local Button = Tab:CreateButton({
   Name = "Tracers",
   Callback = function()
       local ESPTracers = true

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")

local function AssignTracers()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            local PlayerChar = player.Character or player.CharacterAdded:Wait()
            local LocalChar = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

            local humanoidRootPlayer = PlayerChar:WaitForChild("HumanoidRootPart")
            local humanoidRootLocal = LocalChar:WaitForChild("HumanoidRootPart")

            if humanoidRootPlayer and humanoidRootLocal then
                local beam = PlayerChar:FindFirstChild("ESPBeam")
                if beam then
                    beam.Enabled = ESPTracers
                    beam.Attachment0.Parent = LocalChar.HumanoidRootPart
                    beam.Attachment1.Parent = PlayerChar.HumanoidRootPart
                else
                    if ESPTracers then
                        local attachment0 = Instance.new("Attachment")
                        attachment0.Parent = LocalChar.HumanoidRootPart
                        
                        local attachment1 = Instance.new("Attachment")
                        attachment1.Parent = PlayerChar.HumanoidRootPart
                        
                        beam = Instance.new("Beam")
                        beam.Name = "ESPBeam"
                        beam.Color = ColorSequence.new(Color3.fromRGB(0, 202, 0))
                        beam.Width0 = 0.08
                        beam.Width1 = 0.08
                        beam.FaceCamera = true
                        beam.Attachment0 = attachment0
                        beam.Attachment1 = attachment1
                        beam.Parent = PlayerChar
                    end
                end
            end
        end
    end
end

AssignTracers()

Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        AssignTracers()
    end)
end)

LocalPlayer.CharacterAdded:Connect(function()
    AssignTracers()
end)

Players.PlayerRemoving:Connect(function(player)
    local playerChar = Workspace:FindFirstChild(player.Name)
    if playerChar and playerChar:FindFirstChild("ESPBeam") then
        playerChar.ESPBeam:Destroy()
    end
end)

   end,
})

local PlayerTab = Window:CreateTab("üßçüèø‚Äç‚ôÇÔ∏èPlayer", nil) -- Title, Image
local PlayerSection = PlayerTab:CreateSection("Walk")

local WSSlider = PlayerTab:CreateSlider({
   Name = "Walk Speed",
   Range = {0, 500},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 16,
   Flag = "WalkSpeed", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
   end,
})

local PlayerSection = PlayerTab:CreateSection("Jump")

local WSSlider = PlayerTab:CreateSlider({
   Name = "Jump Height",
   Range = {0, 300},
   Increment = 1,
   Suffix = "Jump",
   CurrentValue = 50,
   Flag = "JumpHeight", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
   end,
})

local infjumpbutton = PlayerTab:CreateButton({
   Name = "Infinite Jumps",
   Callback = function()
       local InfiniteJumpEnabled = true
game:GetService("UserInputService").JumpRequest:connect(function()
	if InfiniteJumpEnabled then
		game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
	end
end)
   end,
})








